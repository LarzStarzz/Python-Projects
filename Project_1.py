{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNY+2XxUlwhH25DzzVgqKWF",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/LarzStarzz/Python-Projects/blob/main/Project_1.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Insertion sort"
      ],
      "metadata": {
        "id": "phKTnkK_5uXk"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UBtMucYR5ihZ",
        "outputId": "dc86be65-c2b4-460e-a58f-3f2efb21e2bd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Radix sort of size 1000: 0.006 seconds\n",
            "Radix sort of size 10000: 0.065 seconds\n",
            "Radix sort of size 100000: 0.869 seconds\n",
            "Radix sort of size 1000000: 11.363 seconds\n",
            "Radix sort of size 10000000: 133.338 seconds\n"
          ]
        }
      ],
      "source": [
        "import random\n",
        "import time\n",
        "\n",
        "def insertion_sort(arr):\n",
        "  if len(arr) <= 1:\n",
        "    return\n",
        "\n",
        "  for i in range(1, len(arr)):\n",
        "    key = arr[i]\n",
        "    j = i - 1\n",
        "    while j >= 0 and key < arr[j]:\n",
        "      arr[j + 1] = arr[j]\n",
        "      j -= 1\n",
        "    arr[j + 1] = key\n",
        "  return arr\n",
        "\n",
        "\n",
        "def bubble_sort(arr):\n",
        "  for i in range(len(arr)):\n",
        "    for j in range(0, len(arr) - i - 1):\n",
        "      if arr[j] > arr[j + 1]:\n",
        "        temp = arr[j]\n",
        "        arr[j] = arr[j + 1]\n",
        "        arr[j + 1] = temp\n",
        "  return arr\n",
        "\n",
        "\n",
        "def merge_sort(arr):\n",
        "  #splits the array into left and right sides based on middle\n",
        "  if len(arr) > 1:\n",
        "    middle = len(arr) // 2\n",
        "    left = arr[:middle]\n",
        "    right = arr[middle:]\n",
        "\n",
        "    #recursion to keep splitting and sorting\n",
        "    merge_sort(left)\n",
        "    merge_sort(right)\n",
        "\n",
        "    i = 0 #indexing for left side\n",
        "    j = 0 #indexing for right side\n",
        "    k = 0 #indexting for sorted array\n",
        "\n",
        "    #sorts left and right sides of middle\n",
        "    while i < len(left) and j < len(right):\n",
        "      if left[i] < right[j]:\n",
        "        arr[k] = left[i]\n",
        "        i += 1\n",
        "      else:\n",
        "        arr[k] = right[j]\n",
        "        j += 1\n",
        "      k += 1\n",
        "\n",
        "      while i < len(left):\n",
        "        arr[k] = left[i]\n",
        "        i += 1\n",
        "        k += 1\n",
        "\n",
        "      while j < len(right):\n",
        "        arr[k] = right[j]\n",
        "        j += 1\n",
        "        k += 1\n",
        "\n",
        "    return arr\n",
        "\n",
        "\n",
        "def quick_sort(arr, low, high):\n",
        "  if low < high:\n",
        "    index = partition(arr, low, high)\n",
        "    quick_sort(arr, low, index)\n",
        "    quick_sort(arr, index + 1, high)\n",
        "\n",
        "\n",
        "def partition(arr, low, high): #part of quicksort algorithm\n",
        "  pivot = arr[(low + high) // 2]\n",
        "  i = low - 1\n",
        "  j = high + 1\n",
        "\n",
        "  while True:\n",
        "    i += 1\n",
        "    while arr[i] < pivot:\n",
        "      i += 1\n",
        "    j -= 1\n",
        "    while arr[j] > pivot:\n",
        "      j -= 1\n",
        "    if i >= j:\n",
        "      return j\n",
        "    temp = arr[i]\n",
        "    arr[i] = arr[j]\n",
        "    arr[j] = temp\n",
        "\n",
        "\n",
        "def radix_sort(arr):\n",
        "  max_value = max(arr)\n",
        "  exp = 1\n",
        "  while max_value // exp > 0:\n",
        "    counting_sort(arr, exp)\n",
        "    exp *= 10\n",
        "\n",
        "\n",
        "def counting_sort(arr, exp): #part of radix sort algorithm\n",
        "  output = [0] * len(arr)\n",
        "  count = [0] * 10\n",
        "\n",
        "  for i in range(len(arr)):\n",
        "    index = arr[i] // exp\n",
        "    count[index % 10] += 1\n",
        "\n",
        "  for i in range(1, 10):\n",
        "    count[i] += count[i - 1]\n",
        "\n",
        "  i = len(arr) - 1\n",
        "  while i >= 0:\n",
        "    index = arr[i] // exp\n",
        "    output[count[index % 10] - 1] = arr[i]\n",
        "    count[index % 10] -= 1\n",
        "    i -= 1\n",
        "\n",
        "  i = 0\n",
        "  for i in range(0, len(arr)):\n",
        "    arr[i] = output[i]\n",
        "\n",
        "#generates the random datasets\n",
        "def data_set_generator(size, lower_bound = 0, upper_bound = 2147483647):\n",
        "  data_sets = {}\n",
        "\n",
        "  for i in size:\n",
        "    data_sets[i] = [random.randint(lower_bound, upper_bound) for _ in range(i)]\n",
        "\n",
        "  return data_sets\n",
        "\n",
        "#times all the algorithms\n",
        "def timer(sorter, data):\n",
        "  start_time = time.time()\n",
        "  if sorter == quick_sort:\n",
        "    sorter(data, 0, len(data) - 1) #Specific call just for quicksort\n",
        "  else:\n",
        "    sorter(data) #for all other sorting algorithms\n",
        "  end_time = time.time()\n",
        "  elapsed_time = end_time - start_time\n",
        "  return elapsed_time\n",
        "\n",
        "\n",
        "def main():\n",
        "  dataset_sizes = [1000, 10000, 100000, 1000000, 10000000]\n",
        "  data_sets = data_set_generator(dataset_sizes)\n",
        "\n",
        "  for i, data in data_sets.items():\n",
        "    #timing = timer(insertion_sort, data)\n",
        "    #print(f\"Inserction sort of size {i}: {timing:.3f} seconds\")\n",
        "    #timing = timer(bubble_sort, data)\n",
        "    #print(f\"Bubble sort of size {i}: {timing:.3f} seconds\")\n",
        "    #timing = timer(merge_sort, data)\n",
        "    #print(f\"Merge sort of size {i}: {timing:.3f} seconds\")\n",
        "    #timing = timer(quick_sort, data)\n",
        "    #print(f\"Quick sort of size {i}: {timing:.3f} seconds\")\n",
        "    #timing = timer(radix_sort, data)\n",
        "    #print(f\"Radix sort of size {i}: {timing:.3f} seconds\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "  main()\n",
        "\n",
        "\n"
      ]
    }
  ]
}